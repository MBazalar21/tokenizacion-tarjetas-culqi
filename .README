
# Tokenización de tarjetas con Culqi

Este proyecto implementa un sistema de tokenización de tarjetas de forma segura usando Node.js, TypeScript y MongoDB. Su objetivo es generar, cifrar y validar tokens únicos temporales (válidos por 15 minutos) asociados a tarjetas de crédito/débito, cumpliendo con buenas prácticas de seguridad y arquitectura limpia.

## Buenas prácticas aplicadas

* Tokens firmados con HMAC (no reversibles)

* Tiempo de expiración controlado

* Separación de responsabilidades por capas

* Validación segura con timingSafeEqual

* Encriptación opcional (AES) para datos sensibles


## Arquitectura

Al ser un proyecto creado desde 0 , sin frameworks, se creo un archivo server el cual sera el encargado de dar el enrutamiento a la infraestructura , teniendo este comunicacion con los modulos y poder ejecutar el codigo limpio. 

```bash

src/    
├── core/             
│   └── interfaces/ 
│       └── access/ 
│       └── card/ 
│       └── errors/    
├── domain/               
│   └── utils/            
├── infrastructure/       
│   └── database/
│       └── models/      
│   └── http/    
│   └── logger/         
├── modules/       
│   └── card/      
│       └── controlles/ 
│       └── dtos/ 
│       └── repositories/ 
│       └── services/        
├── index.ts            
├── server.ts                

```
Tambien se necesita un .env , el cual permita crear atributos necesarios para el uso de las apis:

```env
PORT=3000 #puerto
SECRET_KEY=CodigoUltraSecreto #codigosecreto
MONGO_URI=mongodb://accesoapp/database #Ruta de mongodb
```



## Tecnologias Usadas

* Node.js + TypeScript
* MongoDB + Mongoose
* dotenv
* crypto (nativo)
* ts-node / nodemon

## Scripts

Comandos para probar y arrancar el sistema.

```bash
# Instalar dependencias
npm install

# Ejecutar en desarrollo
npm run dev

# Compilar TypeScript
npm run build

# Ejecutar app compilada
npm start
```


## API Reference

#### Creación de un token

```http
  POST /card/tokens
```

| Parameter | Type     | Description                |
| :-------- | :------- | :------------------------- |
| `email` | `string` | **Required**. Correo electronico el propietario de la Tarjeta |
| `card_number` | `number` | **Required**. Numero de Tarjeta |
| `cvv` | `number` | **Required**. Codigo Valor de Verificación de la Tarjeta |
| `expiration_year` | `string` | **Required**. Año de expiracion de la Tarjeta |
| `expiration_month` | `string` | **Required**. Mes de expiracion de la Tarjeta |

#### Obtener datos de la tarjeta

```http
  GET /card/find/${token}
```

| Parameter | Type     | Description                       |
| :-------- | :------- | :-------------------------------- |
| `token`      | `string` | **Required**. Token generado |



## Ejecución de Tests

Comando para ejecutar los test

```bash
  npm run test
```

## SWAGGER

Una vez todo lo que se requiera del proyecto este instalado y ejecutado de manera local, se puede observar y probar aqui el swagger que nos documenta las apis que tiene , segun lo estructurado.

[Swagger](http://localhost:3000/docs)

